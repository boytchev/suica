// Suica 2.0

document.write('<script src="three.min.js" onload="LoadSuica();"></script>');﻿function LoadSuica(){﻿
const DEBUG_CALLS=false;const DEBUG_EVENTS=false;const TEST_MODE=typeof SUICA_TEST_MODE!=='undefined';if(TEST_MODE)
console.log('::> suica');else
console.log(`(\\/)
( ..)  Suica 2.-1
c(”)(”)  (220525)
`);var suica=null;class Suica
{static allSuicas=[];static CIRCLECOUNT=50;static OX=new THREE.Vector3(1,0,0);static OY=new THREE.Vector3(0,1,0);static OZ=new THREE.Vector3(0,0,1);static ORIENTATIONS={YXZ:{SCALE:new THREE.Vector3(1,-1,1),LOOKAT:{FROM:[0,0,100],TO:[0,0,0],UP:[1,0,0]},RIGHT:Suica.OY,UP:Suica.OX,FORWARD:Suica.OZ,},ZYX:{SCALE:new THREE.Vector3(1,1,-1),LOOKAT:{FROM:[100,0,0],TO:[0,0,0],UP:[0,1,0]},RIGHT:Suica.OZ,UP:Suica.OY,FORWARD:Suica.OX,},XZY:{SCALE:new THREE.Vector3(-1,1,1),LOOKAT:{FROM:[0,100,0],TO:[0,0,0],UP:[0,0,1]},RIGHT:Suica.OX,UP:Suica.OZ,FORWARD:Suica.OY,},ZXY:{SCALE:new THREE.Vector3(1,1,1),LOOKAT:{FROM:[0,100,0],TO:[0,0,0],UP:[1,0,0]},RIGHT:Suica.OZ,UP:Suica.OX,FORWARD:Suica.OY,},XYZ:{SCALE:new THREE.Vector3(1,1,1),LOOKAT:{FROM:[0,0,100],TO:[0,0,0],UP:[0,1,0]},RIGHT:Suica.OX,UP:Suica.OY,FORWARD:Suica.OZ,},YZX:{SCALE:new THREE.Vector3(1,1,1),LOOKAT:{FROM:[100,0,0],TO:[0,0,0],UP:[0,0,1]},RIGHT:Suica.OY,UP:Suica.OZ,FORWARD:Suica.OX,},}
static globalHoverObject;static globalHoverEvent;flipNormal(geometry)
{if(this.orientation.FLIP_NORMAL)
{var nor=geometry.getAttribute('normal').array;for(var i=0;i<nor.length;i++)
nor[i]=-nor[i];}
return geometry;}
static OXYZ={COLOR:'black',SIZE:30};static DEMO={DISTANCE:100,ALTITUDE:30,SPEED:1};static BACKGROUND='whitesmoke';static ANAGLYPH={DISTANCE:5};static STEREO={DISTANCE:1};static PERSPECTIVE={NEAR:1,FAR:1000,FOV:40};static ORTHOGRAPHIC={NEAR:0,FAR:1000};static DEFAULT_ORIENTATION='XYZ';static SPLINE={POINTS:[[0,0,0],[0,1,0]],CLOSED:false,INTERPOLANT:true};constructor(suicaTag)
{this._={solidGeometry:{},frameGeometry:{},};suicaTag.style.display='inline-block';suicaTag.style.boxSizing='border-box';if(!getComputedStyle(suicaTag).width&&!suicaTag.hasAttribute('width'))
suicaTag.style.width=TEST_MODE?'400px':'500px';if(!getComputedStyle(suicaTag).height&&!suicaTag.hasAttribute('height'))
suicaTag.style.height=TEST_MODE?'400px':'300px';if(!suicaTag.style.position)suicaTag.style.position='relative';this.id=suicaTag.getAttribute('id')||`suica${Suica.allSuicas.length}`
if(DEBUG_CALLS)console.log(`Suica :: ${this.id}`);this.suicaTag=suicaTag;this.isProactive=false;this.orientation=Suica.ORIENTATIONS[suicaTag.getAttribute('ORIENTATION')?.toUpperCase()||Suica.DEFAULT_ORIENTATION];this.orientation.MATRIX=new THREE.Matrix4().makeBasis(this.orientation.RIGHT,this.orientation.UP,this.orientation.FORWARD);this.orientation.FLIP_NORMAL=this.orientation.SCALE.x<0||this.orientation.SCALE.y<0||this.orientation.SCALE.z<0;this.viewPoint={from:this.orientation.LOOKAT.FROM,to:this.orientation.LOOKAT.TO,up:this.orientation.LOOKAT.UP,};this.createCanvas();this.createRenderer();this.parser=new HTMLParser(this);this.parser.parseEvents(suicaTag,this.canvas,this);this.demoViewPoint=null;this.raycaster=new THREE.Raycaster();this.raycastPointer=new THREE.Vector2();window.suica=this;Suica.allSuicas.push(this);window[this.id]=this;this.canvas.addEventListener('mousemove',Suica.onMouseMove);this.canvas.addEventListener('mousedown',Suica.onMouseDown);this.canvas.addEventListener('mouseup',Suica.onMouseUp);this.canvas.addEventListener('click',Suica.onClick);if(TEST_MODE)
{THREE.Math.seededRandom(1);}
else
{this.canvas.addEventListener('contextmenu',Suica.onContextMenu);THREE.Math.seededRandom(Math.round(Number.MAX_SAFE_INTEGER*Math.random()));}
for(var classObject of[Point,Line,Square,Cube,Polygon,Sphere,Group,Tube,Prism,Cylinder,Cone,Pyramid,Circle,Convex,Model,Construct])
{Suica.registerClass(this,classObject);}
for(var methodName of['cube','square','sphere','point','line','group','cylinder','prism','cone','pyramid','circle','polygon','tube','lookAt','fullScreen','fullWindow','proactive','anaglyph','stereo','perspective','orthographic','lookAt','background','oxyz','demo','allObjects','convex','model','construct'])
{Suica.register(this,methodName);}
this.model.save=function(...params)
{this.parser?.parseTags();return Model.save(...params);}
window.model.save=function(...params)
{Suica.precheck();return Model.save(...params);}}
static registerClass(suica,classObject)
{suica[classObject.name.toLowerCase()]=function(...params)
{suica.parser?.parseTags();return new classObject(suica,...params);}}
static register(suica,methodName)
{window[methodName]=function(...params)
{Suica.precheck();return suica[methodName](...params);}}
createCanvas()
{if(this.suicaTag.clientWidth<1)
this.suicaTag.style.width=(this.suicaTag.getAttribute('width')||(TEST_MODE?400:500))+'px';if(this.suicaTag.clientHeight<1)
this.suicaTag.style.height=(this.suicaTag.getAttribute('height')||(TEST_MODE?400:300))+'px';this.canvas=document.createElement('canvas');this.canvas.width=this.suicaTag.clientWidth;this.canvas.height=this.suicaTag.clientHeight;this.canvas.style=` border: solid 1px gray;
        width: 100%;
        height: 100%;
        box-sizing: border-box;`;this.canvas.suicaObject=this;this.suicaTag.appendChild(this.canvas);}
resizeCanvas()
{var w=this.suicaTag.clientWidth,h=this.suicaTag.clientHeight;if(this.camera instanceof THREE.PerspectiveCamera)
{this.camera.aspect=w/h;}
else
if(this.camera instanceof THREE.OrthographicCamera)
{this.camera.left=-w/2;this.camera.right=+w/2;this.camera.top=h/2;this.camera.bottom=-h/2;}
this.camera.updateProjectionMatrix();this.renderer.setSize(w,h,true);this.uberRenderer?.setSize(w,h,true);}
get canvasAspect()
{return this.canvas.width/this.canvas.height;}
render()
{if(this.uberRenderer)
this.uberRenderer.render(this.scene,this.camera);else
this.renderer.render(this.scene,this.camera);}
createRenderer()
{this.renderer=new THREE.WebGLRenderer({canvas:this.canvas,alpha:true,antialias:true,preserveDrawingBuffer:TEST_MODE,});this.uberRenderer=null;this.scene=new THREE.Scene();this.scene.scale.copy(this.orientation.SCALE);var color=getComputedStyle(this.suicaTag).backgroundColor;if(color=='rgba(0, 0, 0, 0)')
{color=this.suicaTag.getAttribute('BACKGROUND')||Suica.BACKGROUND;}
this.scene.background=Suica.parseColor(color);this.vrCamera=new THREE.Group();this.perspective();for(var attribute of this.suicaTag.getAttributeNames())
{var value=this.suicaTag.getAttribute(attribute);switch(attribute.toUpperCase())
{case'PERSPECTIVE':this.perspective(...Suica.evaluate('['+value+']'));break;case'ORTHOGRAPHIC':this.orthographic(...Suica.evaluate('['+value+']'));break;case'ANAGLYPH':this.anaglyph(...Suica.evaluate('['+value+']'));break;case'STEREO':this.stereo(...Suica.evaluate('['+value+']'));break;case'VR':this.vr();break;case'FULLSCREEN':this.fullScreen();break;case'FULLWINDOW':this.fullWindow();break;case'PROACTIVE':this.proactive();break;}}
this.light=new THREE.PointLight('white',0.5);this.light.position.set(1000,1500,3000);this.scene.add(this.light);this.scene.add(new THREE.AmbientLight('white',0.5));var that=this;this.lastTime=0;function adjustDemoViewPoint(time)
{time*=that.demoViewPoint.speed;var x=that.demoViewPoint.distance*Math.cos(time),y=that.demoViewPoint.altitude,z=that.demoViewPoint.distance*Math.sin(time);that.camera.up.copy(that.orientation.UP);switch(that.orientation)
{case Suica.ORIENTATIONS.XYZ:that.camera.position.set(x,y,-z);that.light.position.set(2*x,2*y,-2*z);break;case Suica.ORIENTATIONS.XZY:that.camera.position.set(-x,-z,y);that.light.position.set(2*x,-2*z,2*y);break;case Suica.ORIENTATIONS.YXZ:that.camera.position.set(y,-x,-z);that.light.position.set(2*y,2*x,-2*z);break;case Suica.ORIENTATIONS.YZX:that.camera.position.set(-z,x,y);that.light.position.set(-2*z,2*x,2*y);break;case Suica.ORIENTATIONS.ZXY:that.camera.position.set(y,-z,x);that.light.position.set(2*y,-2*z,2*x);break;case Suica.ORIENTATIONS.ZYX:that.camera.position.set(-z,y,-x);that.light.position.set(-2*z,2*y,2*x);break;default:console.error('error: Unknown orientation in <suica>');};that.camera.lookAt(that.scene.position);that.camera.updateMatrixWorld();}
function adjustViewPoint()
{var up=[...that.viewPoint.up],from=[...that.viewPoint.from],to=[...that.viewPoint.to];switch(that.orientation)
{case Suica.ORIENTATIONS.XZY:up[0]=-up[0];from[0]=-from[0];to[0]=-to[0];break;case Suica.ORIENTATIONS.YXZ:up[1]=-up[1];from[1]=-from[1];to[1]=-to[1];break;case Suica.ORIENTATIONS.ZYX:up[2]=-up[2];from[2]=-from[2];to[2]=-to[2];break;}
if(that.renderer.xr.isPresenting)
{that.camera.up.set(0,1,0);that.camera.position.set(0,0,0);that.camera.lookAt(1,0,0);that.vrCamera.up.set(...up);that.vrCamera.position.set(...to);that.vrCamera.lookAt(...from);that.vrCamera.position.set(...from);}
else
{that.vrCamera.up.set(0,1,0);that.vrCamera.lookAt(0,0,1);that.vrCamera.position.set(0,0,0);that.camera.up.set(...up);that.camera.position.set(...from);that.camera.lookAt(...to);}
that.light?.position.set(...that.viewPoint.from);}
function loop(time)
{time/=1000;if(TEST_MODE)
{time=Math.floor(5*time)/5;}
if(that.demoViewPoint)
{adjustDemoViewPoint(time);}
else
{adjustViewPoint();}
if(that.ontime)
{if(typeof that.ontime==='string'||that.ontime instanceof String)
that.ontime=window[that.ontime];that.ontime(time,time-that.lastTime);}
if(that.isProactive)
Suica.onMouseMoveUpdate();that.render();that.lastTime=time;}
this.renderer.setAnimationLoop(loop);}
vr()
{this.parser?.parseTags();this.debugCall('vr');var button=this.suicaTag.appendChild(VRButton.createButton(this.renderer));button.style.background='rgba(0, 0, 0, 0.5)';this.renderer.xr.enabled=true;this.camera.position.set(0,0,0);}
fullScreen()
{this.parser?.parseTags();this.debugCall('fullScreen');this.suicaTag.appendChild(createFSButton(this));}
fullWindow()
{this.parser?.parseTags();this.debugCall('fullWindow');this.suicaTag.style.position='fixed';this.suicaTag.style.width='100%';this.suicaTag.style.height='100%';this.suicaTag.style.left='0';this.suicaTag.style.top='0';this.resizeCanvas();var that=this;window.addEventListener('resize',function()
{that.resizeCanvas();});}
proactive()
{this.parser?.parseTags();this.debugCall('proactive');this.isProactive=true;}
anaglyph(distance=Suica.ANAGLYPH.DISTANCE)
{this.parser?.parseTags();this.debugCall('anaglyph',distance);this.uberRenderer?.dispose();this.uberRenderer=new AnaglyphEffect(this,distance);}
stereo(distance=Suica.STEREO.DISTANCE)
{this.parser?.parseTags();this.debugCall('stereo',distance);this.uberRenderer?.dispose();this.uberRenderer=new StereoEffect(this,distance);}
perspective(near=Suica.PERSPECTIVE.NEAR,far=Suica.PERSPECTIVE.FAR,fov=Suica.PERSPECTIVE.FOV)
{this.parser?.parseTags();this.debugCall('perspective',near,far,fov);this.vrCamera.remove(this.camera);this.camera=new THREE.PerspectiveCamera(fov,this.canvasAspect,near,far);this.vrCamera.add(this.camera);this.lookAt();this.camera.updateProjectionMatrix();}
orthographic(near=Suica.ORTHOGRAPHIC.NEAR,far=Suica.ORTHOGRAPHIC.FAR)
{this.parser?.parseTags();this.debugCall('orthographic',near,far);var w=this.canvas.width/2,h=this.canvas.height/2;this.vrCamera.remove(this.camera);this.camera=new THREE.OrthographicCamera(-w,w,h,-h,near,far);this.vrCamera.add(this.camera);this.lookAt();this.camera.updateProjectionMatrix();}
lookAt(from,to,up)
{this.parser?.parseTags();this.viewPoint.from=Suica.parseCenter(from,this.orientation.LOOKAT.FROM);this.viewPoint.to=Suica.parseCenter(to,this.orientation.LOOKAT.TO);this.viewPoint.up=Suica.parseCenter(up,this.orientation.LOOKAT.UP);}
background(color)
{this.parser?.parseTags();this.debugCall('background',...arguments);this.scene.background=Suica.parseColor(color);}
oxyz(size,color)
{this.parser?.parseTags();this.debugCall('oxyz',...arguments);size=Suica.parseNumber(size,Suica.OXYZ.SIZE);color=Suica.parseColor(color,Suica.OXYZ.COLOR);var axes=new THREE.AxesHelper(size)
axes.setColors(color,color,color);this.scene.add(axes);}
demo(distance,altitude,speed)
{this.parser?.parseTags();this.debugCall('demo',...arguments);this.demoViewPoint={distance:Suica.parseNumber(distance,Suica.DEMO.DISTANCE),altitude:Suica.parseNumber(altitude,Suica.DEMO.ALTITUDE),speed:Suica.parseNumber(speed,Suica.DEMO.SPEED),};}
static precheck()
{if(!(window.suica instanceof Suica))
throw'error: No Suica instance is active';}
debugCall(functionName,...parameters)
{if(!DEBUG_CALLS)return;for(var i=0;i<parameters.length;i++)
{if(Array.isArray(parameters[i]))
parameters[i]=`[${parameters[i]}]`;else
if(typeof parameters[i]==='string'||parameters[i]instanceof String)
parameters[i]=`'${parameters[i]}'`;else
parameters[i]=''+parameters[i];}
console.info(`:: ${this.id}.${functionName}(${parameters.join(',')})`);}
static evaluate(string)
{return Function('"use strict";return ('+string+')')();}
static parseColor(data,defaultValue)
{if(data===null||data===''||data===undefined)
return defaultValue;if(data instanceof THREE.Color)
return data;if(Array.isArray(data))
return new THREE.Color(data[0],data[1]||0,data[2]||0);if(typeof data==='string'||data instanceof String)
{if(data.indexOf('0x')>=0||data.indexOf('0X')>=0||data.indexOf('(')>=0)
return Suica.parseColor(Suica.evaluate(data.toLowerCase().replaceAll('%','')));if(data.indexOf(',')>0)
return new THREE.Color(...Suica.evaluate('['+data+']'));}
return new THREE.Color(data||'white');}
static parseCenter(data,defaultValue=[0,0,0])
{if(data===null||data===''||data===undefined)
return defaultValue;if(data.center)
return data.center;if(data instanceof Array)
return data;if(data instanceof THREE.Vector3)
return[data.x,data.y,data.z];if(typeof data==='string'||data instanceof String)
{var global=window[data];if(global&&global.center)
return global.center;var center=Suica.evaluate('['+data+']');if(center.length<3)center.push(0,0,0);return center;}
return data;}
static parseNumber(data,defaultValue)
{if(data===null||data===''||data===undefined)
return defaultValue;return Suica.evaluate(data);}
static parseSize(data,defaultValue)
{if(data===null||data===''||data===undefined)
return defaultValue;if(typeof data==='string'||data instanceof String)
{var size=Suica.evaluate('['+data+']');if(size.length==1)
return size[0]
else
return size;}
return data;}
findPosition(domEvent)
{var canvas=domEvent.target;console.assert(canvas==this.canvas);var rect=canvas.getBoundingClientRect(),pixelX=Math.floor(domEvent.clientX-rect.left),pixelY=Math.floor(domEvent.clientY-rect.top);this.raycastPointer.x=2*pixelX/canvas.clientWidth-1;this.raycastPointer.y=-2*pixelY/canvas.clientHeight+1;return[pixelX-canvas.clientWidth/2,-pixelY+canvas.clientHeight/2];}
allObjects()
{var foundObjects=[];for(var threejsObject of this.scene.children)
{if(threejsObject.suicaObject)
foundObjects.push(threejsObject.suicaObject);}
return foundObjects;}
findObjects(domEvent,onlyInteractive=false)
{var scanObjects=[];if(onlyInteractive)
{for(let object of this.scene.children)
{let suicaObject=object.suicaObject;if(!suicaObject)continue;if(suicaObject.onmousemove||suicaObject.onmousedown||suicaObject.onmouseup||suicaObject.onmouseenter||suicaObject.onmouseleave||suicaObject.onclick)
scanObjects.push(object);}}
else
{scanObjects=this.scene.children;}
findPosition(domEvent);this.raycaster.setFromCamera(this.raycastPointer,this.camera);var intersects=this.raycaster.intersectObjects(scanObjects,true);var foundObjects=[];for(var intersection of intersects)
{let suicaObject=null;for(let object=intersection.object;object;object=object.parent)
{suicaObject=object.suicaObject||suicaObject;}
if(foundObjects.indexOf(suicaObject)<0)
foundObjects.push(suicaObject);}
return foundObjects;}
findObject(domEvent,onlyInteractive=false)
{var objects=this.findObjects(domEvent,onlyInteractive);if(objects.length)
return objects[0];return null;}
addEventListener(type,listener,aux)
{if(aux)console.warn('Suica canvas does not support third parameter of addEventListener');if(!type.startsWith('on'))
type='on'+type;this[type.toLowerCase()]=listener;}
removeEventListener(type,listener,aux)
{if(listener)console.warn('Suica canvas does not support second parameter of removeEventListener');if(aux)console.warn('Suica canvas does not support third parameter of removeEventListener');if(!type.startsWith('on'))
type='on'+type;this[type.toLowerCase()]=null;}
static addEventListener(type,listener,aux)
{window.suica.addEventListener(type,listener,aux);}
static removeEventListener(type,listener,aux)
{window.suica.removeEventListener(type,listener,aux);}
static eventCall(object,eventName,eventParam)
{if(!object)return;if(!object[eventName])return;if(typeof object[eventName]==='string'||object[eventName]instanceof String)
{object[eventName]=window[object[eventName]];}
object[eventName](eventParam);if(DEBUG_EVENTS)console.log(object.id+' :: '+eventName);}
static onMouseMove(event)
{Suica.globalHoverEvent=event;var object=findObject(event,true);if(Suica.hoverObject)
{if(object==Suica.hoverObject)
{Suica.eventCall(object,'onmousemove',event);}
else
{Suica.eventCall(Suica.hoverObject,'onmouseleave',event);Suica.hoverObject=object;Suica.eventCall(Suica.hoverObject,'onmouseenter',event);}}
else
{Suica.hoverObject=object;Suica.eventCall(Suica.hoverObject,'onmouseenter',event);}}
static onMouseMoveUpdate()
{if(!Suica.globalHoverEvent)return;var event=Suica.globalHoverEvent;var object=findObject(event,true);if(Suica.hoverObject)
{if(object!=Suica.hoverObject)
{Suica.eventCall(Suica.hoverObject,'onmouseleave',event);Suica.hoverObject=object;Suica.eventCall(Suica.hoverObject,'onmouseenter',event);}}
else
{Suica.hoverObject=object;Suica.eventCall(Suica.hoverObject,'onmouseenter',event);}}
static onMouseDown(event)
{var object=findObject(event,true);if(object)
{Suica.eventCall(object,'onmousedown',event);}
event.preventDefault();}
static onMouseUp(event)
{var object=findObject(event,true);if(object)
{Suica.eventCall(object,'onmouseup',event);}}
static onClick(event)
{var object=findObject(event,true);if(object)
{Suica.eventCall(object,'onclick',event);}
Suica.eventCall(window.suica,'onclick',event);}
static cloneEvents(target,source)
{target.onmouseenter=source.onmouseenter;target.onmousemove=source.onmousemove;target.onmouseleave=source.onmouseleave;target.onmousedown=source.onmousedown;target.onclick=source.onclick;target.onmouseup=source.onmouseup;}
static onContextMenu(event)
{event.preventDefault();}}
window.style=function(object,properties)
{for(var n in properties)object[n]=properties[n];return object;}
window.element=function(id)
{return document.getElementById(id);}
window.rgb=function(r,g,b)
{return new THREE.Color(r/255,g/255,b/255);}
window.hsl=function(h,s,l)
{return new THREE.Color().setHSL((1+(h/360)%1)%1,s/100,l/100);}
window.random=function(a=0,b=1)
{if(Array.isArray(a))
{var index=Math.floor(a.length*THREE.Math.seededRandom());return a[index];}
return a+(b-a)*THREE.Math.seededRandom();}
window.radians=function(degrees)
{return degrees*Math.PI/180;}
window.degrees=function(radians)
{return radians*180/Math.PI;}
window.clone=function(object)
{if(object.clone)
return object.clone();else
throw'error: cannot clone object';}
window.findPosition=function(domEvent)
{Suica.precheck();var suica=domEvent.target.suicaObject;if(suica)
return suica.findPosition(domEvent);}
window.findObjects=function(domEvent,onlyInteractive=false)
{Suica.precheck();var suica=domEvent.target.suicaObject;if(suica)
return suica.findObjects(domEvent,onlyInteractive);}
window.findObject=function(domEvent,onlyInteractive=false)
{Suica.precheck();var suica=domEvent.target.suicaObject;if(suica)
return suica.findObject(domEvent,onlyInteractive);}
window.spline=function(points=Suica.SPLINE.POINTS,closed,interpolant)
{if(points instanceof Function)
{return function(t)
{return points(t,closed,interpolant);}}
if(typeof points==='string')
{if(points.indexOf(',')>=0)
points=Suica.evaluate('[['+points.replaceAll(';','],[')+']]');else
return function(t)
{return window[points](t,closed,interpolant);}}
if(typeof closed==='undefined')
closed=Suica.SPLINE.CLOSED;if(typeof interpolant==='undefined')
interpolant=Suica.SPLINE.INTERPOLANT;if(!points.length)points=Suica.SPLINE.POINTS;return function(t)
{if(t<0||t>1)
{t=((t%1)+1)%1;}
var p=(points.length-(closed?0:1))*t;var intPoint=Math.floor(p),t=p-intPoint,t2=t*t,t3=t2*t;var p0,p1,p2,p3;if(closed)
{p0=points[(intPoint+points.length-1)%points.length];p1=points[(intPoint+points.length)%points.length];p2=points[(intPoint+points.length+1)%points.length];p3=points[(intPoint+points.length+2)%points.length];}
else
{p0=points[intPoint===0?intPoint:intPoint-1];p1=points[intPoint];p2=points[intPoint>points.length-2?points.length-1:intPoint+1];p3=points[intPoint>points.length-3?points.length-1:intPoint+2];}
function catmullRom(p0,p1,p2,p3)
{var B0=(-t3+2*t2-t)/2,B1=(3*t3-5*t2+2)/2,B2=(-3*t3+4*t2+t)/2,B3=(t3-t2)/2;return p0*B0+p1*B1+p2*B2+p3*B3;}
function bSpline(p0,p1,p2,p3)
{var B0=(1-3*t+3*t2-t3)/6,B1=(4-6*t2+3*t3)/6,B2=(1+3*t+3*t2-3*t3)/6,B3=(t3)/6;return p0*B0+p1*B1+p2*B2+p3*B3;}
var splineFunction=interpolant?catmullRom:bSpline;var point=[splineFunction(p0[0],p1[0],p2[0],p3[0]),splineFunction(p0[1],p1[1],p2[1],p3[1]),splineFunction(p0[2],p1[2],p2[2],p3[2])];if(typeof p0[3]!=='undefined')
point.push(splineFunction(p0[3],p1[3],p2[3],p3[3]));return point;}}
new MutationObserver(function(mutations)
{for(var parentElem of mutations)
{for(var childElem of parentElem.addedNodes)
{if(childElem?.tagName=='SCRIPT')
for(var suica of Suica.allSuicas)
suica.parser?.parseTags();if(childElem?.tagName=='SUICA')
new Suica(childElem);}
if(parentElem.type=='attributes'&&parentElem.target.suicaObject)
{var name=parentElem.attributeName,value=parentElem.target.getAttribute(parentElem.attributeName);parentElem.target.suicaObject[name]=value;}}}).observe(document,{childList:true,subtree:true,attributes:true});window.addEventListener('load',function()
{for(var suica of Suica.allSuicas)
suica.parser?.parseTags();});function createFSButton(suica)
{var inFullScreen=false;var button=document.createElement('button');button.style.display='';button.style.cursor='pointer';button.style.left='calc(50% - 90px)';button.style.width='180px';button.style.position='absolute';button.style.bottom='20px';button.style.padding='12px 6px';button.style.border='1px solid #fff';button.style.borderRadius='4px';button.style.background='rgba(0,0,0,0.5)';button.style.color='#fff';button.style.font='normal 13px';button.style.textAlign='center';button.style.opacity='0.5';button.style.outline='none';button.style.zIndex='999';var requestFullscreen=suica.suicaTag.requestFullscreen||suica.suicaTag.webkitRequestFullscreen||suica.suicaTag.msRequestFullscreen;button.textContent=requestFullscreen?'ENTER FULLSCREEN':'FULLSCREEN NOT SUPPORTED';button.onmouseenter=function()
{button.style.opacity='1.0';};button.onmouseleave=function()
{button.style.opacity='0.5';};if(requestFullscreen)
{button.onclick=function()
{requestFullscreen.call(suica.suicaTag);};}
suica.suicaTag.onfullscreenchange=function()
{button.style.display=document.fullscreenElement?'none':'';suica.resizeCanvas();}
window.addEventListener('resize',function()
{suica.resizeCanvas();});return button;}
class AnaglyphEffect extends THREE.AnaglyphEffect
{constructor(suica,distance)
{super(suica.renderer,suica.canvas.width,suica.canvas.height);this.suica=suica;this.suica.camera.focus=distance;}}
class StereoEffect extends THREE.StereoEffect
{constructor(suica,distance)
{super(suica.renderer,suica.canvas.width,suica.canvas.height);this.suica=suica;this.setEyeSeparation(distance);}}
﻿
class HTMLParser
{constructor(suica)
{this.suica=suica;this.openGroups=[];this.openDrawings=[];}
parseTags()
{this.suica.debugCall('parseTags');this.suica.parser=null;this.suica.parserReadonly=this;this.parseTagsInElement(this.suica,this.suica.suicaTag);this.suica.render();}
parseTagsInElement(that,elem)
{for(var i=0;i<elem.children.length;i++)
{var tagElement=elem.children[i];var tagName=tagElement.tagName;var newObject=null;var parseMethod=this['parseTag'+tagName];if(parseMethod)
{newObject=parseMethod(this.suica,tagElement);if(this.openGroups.length)
this.openGroups[this.openGroups.length-1].add(newObject);}
else
console.error(`error: unknown tag <${tagName}> in <${that.tagName}>`);if(tagName=='GROUP')
{this.openGroups.push(newObject);}
if(tagName=='DRAWING')
{this.openDrawings.push(newObject);}
this.parseTagsInElement(this.suica,tagElement);if(tagName=='GROUP')
{var group=this.openGroups.pop();if(tagElement.hasAttribute('color'))
{group.color=tagElement.getAttribute('color');}}
if(tagName=='DRAWING')
{this.openDrawings.pop();}}}
parseTagBUTTON(suica,elem){}
parseTagCANVAS(suica,elem){}
parseTagDIV(suica,elem){}
parseTagSPAN(suica,elem){}
parseTagOXYZ(suica,elem)
{suica.oxyz(elem.getAttribute('size'),elem.getAttribute('color'));}
parseTagDEMO(suica,elem)
{suica.demo(elem.getAttribute('distance'),elem.getAttribute('altitude'),elem.getAttribute('speed'),);}
parseTagVR(suica,elem)
{suica.vr();}
parseTagFULLSCREEN(suica,elem)
{suica.fullScreen();}
parseTagFULLWINDOW(suica,elem)
{suica.fullWindow();}
parseTagANAGLYPH(suica,elem)
{suica.anaglyph(elem.getAttribute('distance')||Suica.ANAGLYPH.DISTANCE);}
parseTagPROACTIVE(suica,elem)
{suica.proactive();}
parseTagSTEREO(suica,elem)
{suica.stereo(elem.getAttribute('distance')||Suica.STEREO.DISTANCE);}
parseTagPERSPECTIVE(suica,elem)
{suica.perspective(elem.getAttribute('near')||Suica.PERSPECTIVE.NEAR,elem.getAttribute('far')||Suica.PERSPECTIVE.FAR,elem.getAttribute('fov')||Suica.PERSPECTIVE.FOV);}
parseTagORTHOGRAPHIC(suica,elem)
{suica.perspective(elem.getAttribute('near')||Suica.ORTHOGRAPHIC.NEAR,elem.getAttribute('far')||Suica.ORTHOGRAPHIC.FAR);}
parseTagLOOKAT(suica,elem)
{suica.lookAt(elem.getAttribute('from')||elem.getAttribute('center')||undefined,elem.getAttribute('to')||undefined,elem.getAttribute('up')||undefined);}
parseTagBACKGROUND(suica,elem)
{suica.background(elem.getAttribute('color'));}
parseAttributes(elem,object,parseOptions={})
{if(parseOptions.center)
{if(elem.hasAttribute('center'))object.center=elem.getAttribute('center');}
if(elem.hasAttribute('x'))object.x=Number(elem.getAttribute('x'));if(elem.hasAttribute('y'))object.y=Number(elem.getAttribute('y'));if(elem.hasAttribute('z'))object.z=Number(elem.getAttribute('z'));if(elem.hasAttribute('images'))object.images=elem.getAttribute('images');if(elem.hasAttribute('image'))
{var imageName=elem.getAttribute('image');if(window[imageName])
object.image=window[imageName];else
object.image=image(imageName);}
if(parseOptions.widthHeight)
{if(elem.hasAttribute('width'))object.width=Number(elem.getAttribute('width'));if(elem.hasAttribute('height'))object.height=Number(elem.getAttribute('height'));}
if(parseOptions.depth)
{if(elem.hasAttribute('depth'))object.depth=Number(elem.getAttribute('depth'));}
if(parseOptions.spin)
{if(elem.hasAttribute('spin'))object.spin=elem.getAttribute('spin');if(elem.hasAttribute('spinH'))object.spinH=elem.getAttribute('spinH');if(elem.hasAttribute('spinV'))object.spinV=elem.getAttribute('spinV');if(elem.hasAttribute('spinT'))object.spinT=elem.getAttribute('spinT');}
if(parseOptions.wireframe)
{if(elem.hasAttribute('wireframe'))object.wireframe=['','true','yes','1'].indexOf(elem.getAttribute('wireframe').toLowerCase())>=0;}
var id=elem.getAttribute('id');if(id)
{window[id]=object;object.id=id;}
this.parseEvents(elem,object);}
parseEvents(tag,object,suica=null)
{function parseEvent(actualName,name)
{if(tag.hasAttribute(name))
{object[actualName]=tag.getAttribute(name);if(!object[actualName])
{object[actualName]=function(event)
{object[actualName]=window[tag.getAttribute(name)];object[actualName](event);}}}}
parseEvent('onmousemove','onmousemove');parseEvent('onmouseleave','onmouseleave');parseEvent('onmouseenter','onmouseenter');parseEvent('onmousedown','onmousedown');parseEvent('onmouseup','onmouseup');parseEvent('onclick','onclick');parseEvent('onmousemove','mousemove');parseEvent('onmouseleave','mouseleave');parseEvent('onmouseenter','mouseenter');parseEvent('onmousedown','mousedown');parseEvent('onmouseup','mouseup');parseEvent('onclick','click');if(suica)
{object=suica;parseEvent('ontime','ontime');parseEvent('ontime','time');}}
parseTagPOINT(suica,elem)
{var p=suica.point(elem.getAttribute('center'),elem.getAttribute('size'),elem.getAttribute('color'));suica.parserReadonly.parseAttributes(elem,p);elem.suicaObject=p;return p;}
parseTagLINE(suica,elem)
{var p=suica.line(elem.getAttribute('center')||elem.getAttribute('from'),elem.getAttribute('to'),elem.getAttribute('color'));suica.parserReadonly.parseAttributes(elem,p);var id=elem.getAttribute('id');if(id)window[id]=p;elem.suicaObject=p;return p;}
parseTagSQUARE(suica,elem)
{var p=suica.square(elem.getAttribute('center'),elem.getAttribute('size'),elem.getAttribute('color'));suica.parserReadonly.parseAttributes(elem,p,{widthHeight:true,wireframe:true,spin:true});elem.suicaObject=p;return p;}
parseTagCUBE(suica,elem)
{var p=suica.cube(elem.getAttribute('center'),elem.getAttribute('size'),elem.getAttribute('color'));suica.parserReadonly.parseAttributes(elem,p,{widthHeight:true,depth:true,wireframe:true,spin:true});elem.suicaObject=p;return p;}
parseTagCIRCLE(suica,elem)
{var p=suica.circle(elem.getAttribute('center'),elem.getAttribute('size'),elem.getAttribute('color'));suica.parserReadonly.parseAttributes(elem,p,{widthHeight:true,wireframe:true,spin:true});elem.suicaObject=p;return p;}
parseTagPOLYGON(suica,elem)
{var p=suica.polygon(elem.getAttribute('count'),elem.getAttribute('center'),elem.getAttribute('size'),elem.getAttribute('color'));suica.parserReadonly.parseAttributes(elem,p,{widthHeight:true,wireframe:true,spin:true});elem.suicaObject=p;return p;}
parseTagSPHERE(suica,elem)
{var p=suica.sphere(elem.getAttribute('center'),elem.getAttribute('size'),elem.getAttribute('color'));suica.parserReadonly.parseAttributes(elem,p,{widthHeight:true,depth:true,spin:true});elem.suicaObject=p;return p;}
parseTagCYLINDER(suica,elem)
{var p=suica.cylinder(elem.getAttribute('center'),elem.getAttribute('size'),elem.getAttribute('color'));suica.parserReadonly.parseAttributes(elem,p,{widthHeight:true,depth:true,spin:true});elem.suicaObject=p;return p;}
parseTagPRISM(suica,elem)
{var p=suica.prism(elem.getAttribute('count'),elem.getAttribute('center'),elem.getAttribute('size'),elem.getAttribute('color'));suica.parserReadonly.parseAttributes(elem,p,{widthHeight:true,depth:true,wireframe:true,spin:true});elem.suicaObject=p;return p;}
parseTagCONE(suica,elem)
{var p=suica.cone(elem.getAttribute('center'),elem.getAttribute('size'),elem.getAttribute('color'));suica.parserReadonly.parseAttributes(elem,p,{widthHeight:true,depth:true,spin:true});elem.suicaObject=p;return p;}
parseTagPYRAMID(suica,elem)
{var p=suica.pyramid(elem.getAttribute('count'),elem.getAttribute('center'),elem.getAttribute('size'),elem.getAttribute('color'));suica.parserReadonly.parseAttributes(elem,p,{widthHeight:true,depth:true,wireframe:true,spin:true});elem.suicaObject=p;return p;}
parseTagTUBE(suica,elem)
{var p=suica.tube(elem.getAttribute('center'),elem.getAttribute('curve'),elem.getAttribute('radius'),elem.getAttribute('count'),elem.getAttribute('size'),elem.getAttribute('color'));suica.parserReadonly.parseAttributes(elem,p,{widthHeight:true,depth:true,spin:true});elem.suicaObject=p;return p;}
parseTagMODEL(suica,elem)
{var p=suica.model(elem.getAttribute('src'),elem.getAttribute('center'),elem.getAttribute('size'));suica.parserReadonly.parseAttributes(elem,p,{widthHeight:true,depth:true,spin:true});elem.suicaObject=p;return p;}
parseTagCONSTRUCT(suica,elem)
{var p=suica.construct(elem.getAttribute('src'),elem.getAttribute('size'),elem.getAttribute('color'));suica.parserReadonly.parseAttributes(elem,p,{widthHeight:true,depth:true,spin:true,center:true});elem.suicaObject=p;return p;}
parseTagSPLINE(suica,elem)
{var src=elem.getAttribute('src')||Suica.SPLINE.POINTS,closed=Drawing.parseBool(elem,'closed','open',Suica.SPLINE.CLOSED),interpolating=Drawing.parseBool(elem,'interpolating','approximating',Suica.SPLINE.INTERPOLANT);var p=spline(src,closed,interpolating);suica.parserReadonly.parseAttributes(elem,p,{});return p;}
parseTagGROUP(suica,elem)
{var p=suica.group();if(elem.hasAttribute('center'))p.center=elem.getAttribute('center');if(elem.hasAttribute('size'))p.size=elem.getAttribute('size');if(elem.hasAttribute('spin'))p.spin=elem.getAttribute('spin');suica.parserReadonly.parseAttributes(elem,p,{widthHeight:true,depth:true,spin:true});elem.suicaObject=p;return p;}
parseTagCONVEX(suica,elem)
{var points=elem.getAttribute('src');points=Suica.evaluate('[['+points.replaceAll(';','],[')+']]');var p=convex(points,elem.getAttribute('size'),elem.getAttribute('color'));suica.parserReadonly.parseAttributes(elem,p,{widthHeight:true,depth:true,spin:true});return p;}
parseTagCLONE(suica,elem)
{var sourceId=elem.getAttribute('src');if(!window[sourceId])
{console.error(`error: unknown object name '${sourceId}' in attribute 'src' of tag <clone>`);return;}
var p=window[sourceId].clone;if(elem.hasAttribute('center'))p.center=elem.getAttribute('center');if(elem.hasAttribute('size'))p.size=Suica.parseSize(elem.getAttribute('size'));if(elem.hasAttribute('spin'))p.spin=elem.getAttribute('spin');if(elem.hasAttribute('color'))p.color=elem.getAttribute('color');suica.parserReadonly.parseAttributes(elem,p,{widthHeight:true,depth:true,spin:true,wireframe:true});elem.suicaObject=p;return p;}
parseTagDRAWING(suica,elem)
{var color=elem.getAttribute('color')||Drawing.COLOR;var width=elem.getAttribute('width')||Drawing.SIZE;var height=elem.getAttribute('height')||width;if(elem.hasAttribute('size'))
{var size=Suica.parseSize(elem.getAttribute('size'));if(Array.isArray(size))
{if(size.length==1)
width=height=size[0];else
if(size.length==2)
{width=size[0];height=size[1];}}
else
{width=height=size;}}
var p=drawing(width,height,color);var id=elem.getAttribute('id');if(id)window[id]=p;elem.suicaObject=p;return p;}
parseTagMOVETO(suica,elem)
{moveTo(...Drawing.parseXY(elem,'point','x','y'));}
parseTagLINETO(suica,elem)
{lineTo(...Drawing.parseXY(elem,'point','x','y'));}
parseTagCURVETO(suica,elem)
{var m=Drawing.parseXY(elem,'m','mx','my');curveTo(...m,...Drawing.parseXY(elem,'point','x','y'));}
parseTagARC(suica,elem)
{var radius=Drawing.parseN(elem,'radius',Drawing.ARC_RADIUS),from=Drawing.parseN(elem,'from',Drawing.ARC_FROM),to=Drawing.parseN(elem,'to',Drawing.ARC_TO);arc(...Drawing.parseXY(elem,'point','x','y'),radius,from,to,Drawing.parseBool(elem,'cw','ccw',Drawing.ARC_CW));}
parseTagSTROKE(suica,elem)
{var color=elem.getAttribute('color')||Suica.DEFAULT.STROKE.COLOR,width=Drawing.parseN(elem,'width',Drawing.STROKE_WIDTH),closed=Drawing.parseBool(elem,'closed','',Drawing.STROKE_CLOSED);if(elem.hasAttribute('closed')&&elem.getAttribute('closed')=="")closed=true;stroke(color,width,closed);}
parseTagFILL(suica,elem)
{var color=elem.getAttribute('color')||Drawing.FILL_COLOR;fill(color);}
parseTagFILLTEXT(suica,elem)
{var text=elem.getAttribute('text')||'',color=elem.getAttribute('color')||Drawing.FILL_COLOR,font=elem.getAttribute('font')||Drawing.FONT;fillText(...Drawing.parseXY(elem,'point','x','y'),text,color,font);}
parseTagCLEAR(suica,elem)
{var color=elem.getAttribute('color')||elem.getAttribute('background');clear(color);}}
class Drawing
{static SIZE=32;static COLOR=null;static ARC_RADIUS=10;static ARC_FROM=0;static ARC_TO=360;static ARC_CW=true;static FILL_COLOR='gray';static STROKE_COLOR='black';static STROKE_WIDTH=1;static STROKE_CLOSED=false;static FONT='20px Arial';static current;constructor(width=Drawing.SIZE,height=width,color=Drawing.COLOR,newCanvas=true)
{if(newCanvas)
{this.canvas=document.createElement('canvas');this.canvas.width=width;this.canvas.height=height;this.texture=null;this.context=this.canvas.getContext('2d');this.context.clearRect(0,0,width,height);if(color)
{this.context.fillStyle=color;this.context.fillRect(0,0,width,height);}
this.needsNewPath=true;}
for(var methodName of['moveTo','lineTo','curveTo','arc','fillText','stroke','fill','clear'])
{Drawing.register(methodName);}}
static register(methodName)
{window[methodName]=function(...params)
{Drawing.precheck();Drawing.current[methodName](...params);}}
static parseN(elem,name,defaultValue)
{return Suica.parseNumber(elem.getAttribute(name),defaultValue);}
static parseXY(elem,centerName,xName,yName)
{var xy=Suica.parseSize(elem.getAttribute(centerName),[0,0]);if(elem.hasAttribute(xName))
xy[0]=Drawing.parseN(elem,xName,0);if(elem.hasAttribute(yName))
xy[1]=Drawing.parseN(elem,yName,0);return xy;}
static parseBool(elem,trueName,falseName,defaultValue)
{const TRUTH=[null,'','true','yes','TRUE','True','YES','Yes','1'];if(trueName&&elem.hasAttribute(trueName))
return TRUTH.indexOf(elem.getAttribute(trueName))>-1;if(falseName&&elem.hasAttribute(falseName))
return TRUTH.indexOf(elem.getAttribute(falseName))==-1;return defaultValue;}
managePath()
{if(this.needsNewPath)
{this.context.beginPath();this.needsNewPath=false;}}
moveTo(x=0,y=0,...morePoints)
{this.managePath();this.context.moveTo(x,this.canvas.height-y);for(var i=0;i<morePoints.length;i+=2)
{x=morePoints[i]||0;y=morePoints[i+1]||0;this.context.lineTo(x,this.canvas.height-y);}}
lineTo(x=0,y=0,...morePoints)
{this.managePath();this.context.lineTo(x,this.canvas.height-y);for(var i=0;i<morePoints.length;i+=2)
{x=morePoints[i]||0;y=morePoints[i+1]||0;this.context.lineTo(x,this.canvas.height-y);}}
curveTo(mx=0,my=0,x=0,y=0)
{this.managePath();this.context.quadraticCurveTo(mx,this.canvas.height-my,x,this.canvas.height-y);}
arc(x=0,y=0,r=Drawing.ARC_RADIUS,from=Drawing.ARC_FROM,to=Drawing.ARC_TO,cw=Drawing.ARC_CW)
{this.managePath();this.context.arc(x,this.canvas.height-y,r,THREE.Math.degToRad(from-90),THREE.Math.degToRad(to-90),!cw);}
fillText(x=0,y=0,text='',color=Drawing.FILL_COLOR,font=Drawing.FONT)
{if(this.texture)this.texture.needsUpdate=true;this.context.fillStyle=color;this.context.font=font;this.context.fillText(text,x,this.canvas.height-y);}
stroke(color=Drawing.STROKE_COLOR,width=Drawing.STROKE_WIDTH,closed=Drawing.STROKE_CLOSED)
{if(this.texture)this.texture.needsUpdate=true;if(closed)this.context.closePath();this.context.strokeStyle=color;this.context.lineWidth=width;this.context.stroke();this.needsNewPath=true;}
fill(color=Drawing.FILL_COLOR)
{if(this.texture)this.texture.needsUpdate=true;this.context.fillStyle=color;this.context.fill();this.needsNewPath=true;}
clear(color)
{if(this.texture)this.texture.needsUpdate=true;if(color)
{this.context.fillStyle=color;this.context.fillRect(-1,-1,this.canvas.width+2,this.canvas.height+2);}
else
{this.context.clearRect(-1,-1,this.canvas.width+2,this.canvas.height+2);}
this.needsNewPath=true;}
get image()
{if(!this.texture)
{this.texture=new THREE.CanvasTexture(this.canvas);this.texture.anisotropy=window.suica.renderer.capabilities.getMaxAnisotropy();this.texture.wrapS=THREE.RepeatWrapping;this.texture.wrapT=THREE.RepeatWrapping;}
return this.texture;}
get clone()
{var newDrawing=drawing(this.canvas.width,this.canvas.height,'white',false);newDrawing.canvas=this.canvas;newDrawing.context=this.context;newDrawing.texture=this.texture;return newDrawing;}
static precheck()
{if(!(Drawing.current instanceof Drawing))
throw'error: No Drawing instance is active';}}
window.drawing=function(...params)
{Drawing.current=new Drawing(...params);return Drawing.current;}
window.image=function(url=null)
{var texture=new THREE.TextureLoader().load(url);texture.wrapS=THREE.RepeatWrapping;texture.wrapT=THREE.RepeatWrapping;texture.magFilter=THREE.LinearFilter;texture.minFilter=THREE.LinearMipmapLinearFilter;texture.anisotropy=window.suica.renderer.capabilities.getMaxAnisotropy();return texture;}
﻿
class Mesh
{static id=0;constructor(suica,solidMesh,frameMesh)
{this.id='Object'+(++Mesh.id);this.suica=suica;this.solidMesh=solidMesh;this.frameMesh=frameMesh;this.threejs=solidMesh;this.threejs.suicaObject=this;this.isWireframe=false;this.meshSize=[null,null,null];this.meshSpin=[0,0,0];this.meshImages=1;suica.scene.add(solidMesh);window.its=this;}
static createMaterials()
{var CANVAS_SIZE=128;var canvas=document.createElement('canvas');canvas.width=CANVAS_SIZE;canvas.height=CANVAS_SIZE;var context=canvas.getContext('2d');context.fillStyle='white';var gradient=context.createRadialGradient(CANVAS_SIZE/2,CANVAS_SIZE/2,CANVAS_SIZE/2-5,CANVAS_SIZE/2,CANVAS_SIZE/2,CANVAS_SIZE/2);gradient.addColorStop(0,'white');gradient.addColorStop(1,'rgba(0,0,0,0)');context.fillStyle=gradient;context.beginPath();context.arc(CANVAS_SIZE/2,CANVAS_SIZE/2,CANVAS_SIZE/2-2,0,2*Math.PI);context.fill();Mesh.pointMaterial=new THREE.PointsMaterial({color:'white',size:5,sizeAttenuation:true,map:new THREE.CanvasTexture(canvas),transparent:true,alphaTest:0.1,});Mesh.solidMaterial=new THREE.MeshStandardMaterial({color:'cornflowerblue',side:THREE.DoubleSide,});Mesh.flatMaterial=new THREE.MeshStandardMaterial({color:'cornflowerblue',side:THREE.DoubleSide,flatShading:true,});CANVAS_SIZE=4;var canvas2=document.createElement('canvas');canvas2.width=CANVAS_SIZE;canvas2.height=1;var context2=canvas2.getContext('2d');context2.fillStyle='white';context2.fillRect(0,0,canvas2.width,canvas2.height);Mesh.lineMaterial=new THREE.MeshBasicMaterial({color:'black',transparent:true,map:new THREE.CanvasTexture(canvas2),});Mesh.lineMaterial.onBeforeCompile=shader=>{shader.fragmentShader=shader.fragmentShader.replace('#include <map_fragment>',`#ifdef USE_MAP
     vec4 texelColor = texture2D( map, vUv );
     diffuseColor *= texelColor;
    #endif`);}}
get center()
{this.suica.parser?.parseTags();return[this.threejs.position.x,this.threejs.position.y,this.threejs.position.z];}
set center(center)
{this.suica.parser?.parseTags();center=Suica.parseCenter(center);this.threejs.position.set(...center);}
get x()
{this.suica.parser?.parseTags();return this.threejs.position.x;}
set x(x)
{this.suica.parser?.parseTags();this.threejs.position.x=x;}
get y()
{this.suica.parser?.parseTags();return this.threejs.position.y;}
set y(y)
{this.suica.parser?.parseTags();this.threejs.position.y=y;}
get z()
{this.suica.parser?.parseTags();return this.threejs.position.z;}
set z(z)
{this.suica.parser?.parseTags();this.threejs.position.z=z;}
get color()
{this.suica.parser?.parseTags();var col=this.threejs.material.color;return[col.r,col.g,col.b];}
set color(col)
{this.suica.parser?.parseTags();this.threejs.material.color=Suica.parseColor(col);this.threejs.material.needsUpdate=true;}
get image()
{return this._drawing;}
set image(drawing)
{this.suica.parser?.parseTags();this._drawing=drawing;if(!drawing)
{delete this.threejs.material.map;this.threejs.material.transparent=false,this.threejs.material.needsUpdate=true;return;}
if(drawing instanceof Drawing)
{this._drawing=drawing.clone;this.threejs.material.map=this._drawing.image;this.threejs.material.transparent=true,this.threejs.material.needsUpdate=true;this.updateImages();return;}
if(drawing instanceof THREE.Texture)
{this.threejs.material.map=drawing;this.threejs.material.transparent=true,this.threejs.material.needsUpdate=true;this.updateImages();return;}
if(typeof drawing=='string'||drawing instanceof String)
{this.image=image(drawing);return;}
throw'error: parameter of `image` is not a drawing';}
get images()
{return this.meshImages;}
set images(img)
{this.suica.parser?.parseTags();if(typeof img==='string'||img instanceof String)
{img=img.replaceAll(' ','');img=img.split(',').map(Number);}
this.meshImages=img;this.updateImages();}
updateImages()
{var img=this.meshImages;if(!isNaN(img))
{this.threejs.material.map?.repeat.set(img,img);return;}
if(Array.isArray(img))
{switch(img.count)
{case 0:this.threejs.material.map?.repeat.set(1,1);break;case 1:this.threejs.material.map?.repeat.set(img[0],img[0]);break;default:this.threejs.material.map?.repeat.set(img[0],img[1]);}
return;}
throw`error: invalid value '${img}' of 'images' property`;}
updateScale()
{var width=this.meshSize[0];var height=this.meshSize[1];var depth=this.meshSize[2];if(height===null)height=width;if(depth===null)depth=width;switch(this.suica.orientation)
{case Suica.ORIENTATIONS.YXZ:this.threejs.scale.set(height,width,depth);break;case Suica.ORIENTATIONS.ZYX:this.threejs.scale.set(depth,height,width);break;case Suica.ORIENTATIONS.XZY:this.threejs.scale.set(width,depth,height);break;case Suica.ORIENTATIONS.ZXY:this.threejs.scale.set(height,depth,width);break;case Suica.ORIENTATIONS.XYZ:this.threejs.scale.set(width,height,depth);break;case Suica.ORIENTATIONS.YZX:this.threejs.scale.set(depth,width,height);break;default:throw'error: unknown orientation';}}
get width()
{return this.meshSize[0];}
set width(width)
{this.meshSize[0]=width;this.updateScale();}
get height()
{return(this.meshSize[1]!==null)?this.meshSize[1]:this.meshSize[0];}
set height(height)
{this.meshSize[1]=height;this.updateScale();}
get depth()
{return(this.meshSize[2]!==null)?this.meshSize[2]:this.meshSize[0];}
set depth(depth)
{this.meshSize[2]=depth;this.updateScale();}
get size()
{this.suica.parser?.parseTags();if(this.meshSize[2]===null)
{if(this.meshSize[1]===null)
return this.meshSize[0];else
return[this.meshSize[0],this.meshSize[1]];}
return[this.meshSize[0],this.meshSize[1],this.meshSize[2]];}
set size(size)
{this.suica.parser?.parseTags();size=Suica.parseSize(size);if(Array.isArray(size))
{if(size.length==0)
this.meshSize=[null,null,null];else
if(size.length==1)
this.meshSize=[size[0],null,null];else
if(size.length==2)
this.meshSize=[size[0],size[1],null];else
this.meshSize=[size[0],size[1],size[2]];}
else
{this.meshSize=[size,null,null];}
this.updateScale();}
get wireframe()
{return this.isWireframe;}
set wireframe(wireframe)
{if(!this.frameMesh)
throw'error: wireframe property not available';this.isWireframe=wireframe;var oldMesh=this.threejs,newMesh=(wireframe===true)||(['','true','yes','1'].indexOf(String(wireframe).toLowerCase())>=0)?this.frameMesh:this.solidMesh;newMesh.position.copy(oldMesh.position);newMesh.scale.copy(oldMesh.scale);newMesh.material.color.copy(oldMesh.material.color);if(oldMesh.material.map)
{newMesh.material.map=oldMesh.material.map;newMesh.material.transparent=oldMesh.material.transparent;newMesh.material.needsUpdate=true;}
this.threejs=newMesh;this.threejs.suicaObject=this;this.suica.scene.remove(oldMesh);this.suica.scene.add(newMesh);}
style(properties)
{for(var n in properties)this[n]=properties[n];return this;}
updateOrientation()
{var spin=this.meshSpin;if(!spin)return;var flip=1;switch(this.suica.orientation)
{case Suica.ORIENTATIONS.XZY:flip=-1;break;case Suica.ORIENTATIONS.YXZ:flip=-1;break;case Suica.ORIENTATIONS.ZYX:flip=-1;break;};this.threejs.rotation.set(0,0,0);if(Array.isArray(spin))
{if(spin[0])this.threejs.rotateOnAxis(this.suica.orientation.UP,radians(flip*spin[0]));if(spin[1])this.threejs.rotateOnAxis(this.suica.orientation.RIGHT,radians(flip*spin[1]));if(spin[2])this.threejs.rotateOnAxis(this.suica.orientation.UP,radians(flip*spin[2]));}
else
{this.threejs.rotateOnAxis(this.suica.orientation.UP,radians(flip*spin));}}
get spin()
{return this.meshSpin;}
set spin(spin)
{this.meshSpin=Suica.parseSize(spin);this.updateOrientation();}
get spinH()
{return this.meshSpin[0];}
set spinH(spin)
{this.meshSpin[0]=Number(spin);this.updateOrientation();}
get spinV()
{return this.meshSpin[1];}
set spinV(spin)
{this.meshSpin[1]=Number(spin);this.updateOrientation();}
get spinT()
{return this.meshSpin[2];}
set spinT(spin)
{this.meshSpin[2]=Number(spin);this.updateOrientation();}
addEventListener(type,listener,aux)
{if(aux)console.warn('Suica objects do not support third parameter of addEventListener');if(!type.startsWith('on'))
type='on'+type;this[type.toLowerCase()]=listener;}
removeEventListener(type,listener,aux)
{if(listener)console.warn('Suica objects do not support second parameter of removeEventListener');if(aux)console.warn('Suica objects do not support third parameter of removeEventListener');if(!type.startsWith('on'))
type='on'+type;this[type.toLowerCase()]=null;}}
Mesh.createMaterials();﻿
class Point extends Mesh
{static COLOR='black';static SIZE=7;static solidGeometry;constructor(suica,center,size,color)
{suica.parser?.parseTags();suica.debugCall('point',center,size,color);if(!Point.solidGeometry)
{Point.solidGeometry=new THREE.BufferGeometry();Point.solidGeometry.setAttribute('position',new THREE.BufferAttribute(new Float32Array([0,0,0]),3));}
super(suica,new THREE.Points(Point.solidGeometry,Mesh.pointMaterial.clone()),null,);this.center=Suica.parseCenter(center);this.size=Suica.parseSize(size,Point.SIZE);this.color=Suica.parseColor(color,Point.COLOR);this._drawing=this.threejs.material.map;}
get size()
{this.suica.parser?.parseTags();return this.threejs.material.size;}
set size(size)
{this.suica.parser?.parseTags();this.threejs.material.size=size;this.threejs.material.needsUpdate=true;}
style(properties)
{for(var n in properties)this[n]=properties[n];return this;}
get clone()
{var object=new Point(this.suica,this.center,this.size,this.color);object.image=this.image;Suica.cloneEvents(object,this);return object;}}
﻿
class Line extends Mesh
{static COLOR='black';static TO=[0,30,0];static solidGeometry;constructor(suica,center,to,color)
{suica.parser?.parseTags();suica.debugCall('line',center,to,color);if(!Line.solidGeometry)
{Line.solidGeometry=new THREE.BufferGeometry();Line.solidGeometry.setAttribute('position',new THREE.BufferAttribute(new Float32Array([0,0,0,0,30,0]),3));Line.solidGeometry.setAttribute('uv',new THREE.BufferAttribute(new Float32Array([0,0,1,0]),2));}
super(suica,new THREE.LineSegments(Line.solidGeometry.clone(),Mesh.lineMaterial.clone()),null,);this.center=Suica.parseCenter(center);this.to=Suica.parseCenter(to,Line.TO);this.color=Suica.parseColor(color,Line.COLOR);}
get center()
{this.suica.parser?.parseTags();var pos=this.threejs.geometry.getAttribute('position');return[pos.getX(0),pos.getY(0),pos.getZ(0)];}
set center(center)
{this.suica.parser?.parseTags();center=Suica.parseCenter(center);this.threejs.geometry.getAttribute('position').setXYZ(0,...center);this.threejs.geometry.needsUpdate=true;}
get from()
{return this.center;}
set from(from)
{this.center=from;}
get to()
{this.suica.parser?.parseTags();var pos=this.threejs.geometry.getAttribute('position');return[pos.getX(1),pos.getY(1),pos.getZ(1)];}
set to(to)
{this.suica.parser?.parseTags();to=Suica.parseCenter(to);this.threejs.geometry.getAttribute('position').setXYZ(1,...to);this.threejs.geometry.needsUpdate=true;}
get clone()
{var object=new Line(this.suica,this.from,this.to,this.color);object.image=this.image;Suica.cloneEvents(object,this);return object;}}
﻿
class Square extends Mesh
{static COLOR='lightsalmon';static FRAMECOLOR='black';static SIZE=30;constructor(suica,center,size,color)
{suica.parser?.parseTags();suica.debugCall('square',center,size,color);suica._.solidGeometry.square=suica.flipNormal(new THREE.PlaneGeometry(1,1).applyMatrix4(suica.orientation.MATRIX));;suica._.frameGeometry.square=new THREE.BufferGeometry();suica._.frameGeometry.square.setAttribute('position',new THREE.BufferAttribute(new Float32Array([-0.5,-0.5,0,+0.5,-0.5,0,+0.5,-0.5,0,+0.5,+0.5,0,+0.5,+0.5,0,-0.5,+0.5,0,-0.5,+0.5,0,-0.5,-0.5,0,]),3));suica._.frameGeometry.square.setAttribute('uv',new THREE.BufferAttribute(new Float32Array([0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,]),2));suica._.frameGeometry.square.applyMatrix4(suica.orientation.MATRIX);super(suica,new THREE.Mesh(suica._.solidGeometry.square,Mesh.solidMaterial.clone()),new THREE.LineSegments(suica._.frameGeometry.square,Mesh.lineMaterial.clone()),);this.center=Suica.parseCenter(center);this.size=Suica.parseSize(size,Square.SIZE);this.color=Suica.parseColor(color,Square.COLOR);}
get clone()
{var object=new Square(this.suica,this.center,this.size,this.color);object.spin=this.spin;object.wireframe=this.wireframe;object.image=this.image;Suica.cloneEvents(object,this);return object;}}
﻿
class Cube extends Mesh
{static COLOR='lightsalmon';static FRAMECOLOR='black';static SIZE=30;constructor(suica,center,size,color)
{suica.parser?.parseTags();suica.debugCall('cube',center,size,color);suica._.solidGeometry.cube=suica.flipNormal(new THREE.BoxGeometry(1,1,1).applyMatrix4(suica.orientation.MATRIX));suica._.frameGeometry.cube=new THREE.BufferGeometry();suica._.frameGeometry.cube.setAttribute('position',new THREE.BufferAttribute(new Float32Array([-0.5,-0.5,-0.5,+0.5,-0.5,-0.5,+0.5,-0.5,-0.5,+0.5,+0.5,-0.5,+0.5,+0.5,-0.5,-0.5,+0.5,-0.5,-0.5,+0.5,-0.5,-0.5,-0.5,-0.5,-0.5,-0.5,+0.5,+0.5,-0.5,+0.5,+0.5,-0.5,+0.5,+0.5,+0.5,+0.5,+0.5,+0.5,+0.5,-0.5,+0.5,+0.5,-0.5,+0.5,+0.5,-0.5,-0.5,+0.5,-0.5,-0.5,-0.5,-0.5,-0.5,+0.5,+0.5,-0.5,-0.5,+0.5,-0.5,+0.5,+0.5,+0.5,-0.5,+0.5,+0.5,+0.5,-0.5,+0.5,-0.5,-0.5,+0.5,+0.5,]),3));suica._.frameGeometry.cube.setAttribute('uv',new THREE.BufferAttribute(new Float32Array([0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,]),2));suica._.frameGeometry.cube=suica._.frameGeometry.cube.applyMatrix4(suica.orientation.MATRIX);super(suica,new THREE.Mesh(suica._.solidGeometry.cube,Mesh.solidMaterial.clone()),new THREE.LineSegments(suica._.frameGeometry.cube,Mesh.lineMaterial.clone()),);this.center=Suica.parseCenter(center);this.size=Suica.parseSize(size,Cube.SIZE);this.color=Suica.parseColor(color,Cube.COLOR);}
get clone()
{var object=new Cube(this.suica,this.center,this.size,this.color);object.spin=this.spin;object.wireframe=this.wireframe;object.image=this.image;Suica.cloneEvents(object,this);return object;}}
﻿
class Polygon extends Mesh
{static COLOR='lightsalmon';static FRAMECOLOR='black';static SIZE=30;static COUNT=3;constructor(suica,count,center,size,color)
{suica.parser?.parseTags();if(count<Suica.CIRCLECOUNT)
suica.debugCall('polygon',count,center,size,color);else
suica.debugCall('circle',center,size,color);suica._.solidGeometry.polygon=[];suica._.frameGeometry.polygon=[];super(suica,new THREE.Mesh(Polygon.getSolidGeometry(suica,count),Mesh.solidMaterial.clone()),new THREE.LineLoop(Polygon.getFrameGeometry(suica,count),Mesh.lineMaterial.clone()),);this.center=Suica.parseCenter(center);this.size=Suica.parseSize(size,Polygon.SIZE);this.color=Suica.parseColor(color,Polygon.COLOR);this.n=Suica.parseNumber(count,Polygon.COUNT);}
get count()
{this.suica.parser?.parseTags();return this.n;}
set count(count)
{this.suica.parser?.parseTags();if(count==this.n)return;this.solidMesh.geometry=Polygon.getSolidGeometry(this.suica,count);this.frameMesh.geometry=Polygon.getFrameGeometry(this.suica,count);this.threejs.geometry=this.isWireframe?this.frameMesh.geometry:this.solidMesh.geometry;}
static getSolidGeometry(suica,count)
{if(!suica._.solidGeometry.polygon[count])
suica._.solidGeometry.polygon[count]=suica.flipNormal(new THREE.CircleGeometry(0.5,count,-Math.PI*(1/2-1/count)).applyMatrix4(suica.orientation.MATRIX));return suica._.solidGeometry.polygon[count];}
static getFrameGeometry(suica,count)
{if(!suica._.frameGeometry.polygon[count])
{suica._.frameGeometry.polygon[count]=new THREE.BufferGeometry();let vertices=new Float32Array(3*count+3),uvs=new Float32Array(2*count+2);for(var i=0;i<=count;i++)
{var angle=2*Math.PI*i/count-Math.PI*(1/2-1/count);vertices[3*i]=0.5*Math.cos(angle);vertices[3*i+1]=0.5*Math.sin(angle);if(count>8)
uvs[2*i]=4*i/count;else
uvs[2*i]=i;}
suica._.frameGeometry.polygon[count].setAttribute('position',new THREE.BufferAttribute(vertices,3));suica._.frameGeometry.polygon[count].setAttribute('uv',new THREE.BufferAttribute(uvs,2));suica._.frameGeometry.polygon[count].applyMatrix4(suica.orientation.MATRIX);}
return suica._.frameGeometry.polygon[count];}
get clone()
{var object=new Polygon(this.suica,this.n,this.center,this.size,this.color);object.spin=this.spin;object.wireframe=this.wireframe;object.image=this.image;Suica.cloneEvents(object,this);return object;}}
class Circle extends Polygon
{constructor(suica,center,size,color)
{super(suica,Suica.CIRCLECOUNT,center,size,color);}}
Sphere=class Sphere extends Mesh
{static COLOR='lightsalmon';static SIZE=30;static COUNT=50;constructor(suica,center,size,color)
{suica.parser?.parseTags();suica.debugCall('sphere',center,size,color);suica._.solidGeometry.sphere=null;if(!suica._.solidGeometry.sphere)
{suica._.solidGeometry.sphere=suica.flipNormal(new THREE.SphereGeometry(0.5,Sphere.COUNT,Math.round(Sphere.COUNT/2)).applyMatrix4(suica.orientation.MATRIX));}
super(suica,new THREE.Mesh(suica._.solidGeometry.sphere,Mesh.solidMaterial.clone()),null,);this.center=Suica.parseCenter(center);this.size=Suica.parseSize(size,Sphere.SIZE);this.color=Suica.parseColor(color,Sphere.COLOR);}
get clone()
{var object=new Sphere(this.suica,this.center,this.size,this.color);object.spin=this.spin;object.image=this.image;Suica.cloneEvents(object,this);return object;}}
﻿
class Prism extends Mesh
{static COLOR='lightsalmon';static SIZE=30;static COUNT=6;constructor(suica,count,center,size,color,flatShading=true)
{count=Suica.parseNumber(count,Prism.COUNT);suica.parser?.parseTags();if(flatShading)
suica.debugCall('prism',count,center,size,color);else
suica.debugCall('cylinder',center,size,color);suica._.solidGeometry.prism=[];suica._.frameGeometry.prism=[];super(suica,new THREE.Mesh(Prism.getSolidGeometry(suica,count),flatShading?Mesh.flatMaterial.clone():Mesh.solidMaterial.clone()),new THREE.LineSegments(Prism.getFrameGeometry(suica,count),Mesh.lineMaterial.clone()),);this.center=Suica.parseCenter(center);this.size=Suica.parseSize(size,Prism.SIZE);this.color=Suica.parseColor(color,Prism.COLOR);this.n=count;this.flatShading=flatShading;}
get count()
{this.suica.parser?.parseTags();return this.n;}
set count(count)
{this.suica.parser?.parseTags();if(count==this.n)return;this.solidMesh.geometry=Prism.getSolidGeometry(count);this.frameMesh.geometry=Prism.getFrameGeometry(count);this.threejs.geometry=this.isWireframe?this.frameMesh.geometry:this.solidMesh.geometry;}
static getSolidGeometry(suica,count)
{if(!suica._.solidGeometry.prism[count])
suica._.solidGeometry.prism[count]=suica.flipNormal(new THREE.CylinderGeometry(0.5,0.5,1,count,1,false).translate(0,0.5,0).applyMatrix4(suica.orientation.MATRIX));return suica._.solidGeometry.prism[count];}
static getFrameGeometry(suica,count)
{if(!suica._.frameGeometry.prism[count])
{suica._.frameGeometry.prism[count]=new THREE.BufferGeometry();let vertices=new Float32Array(3*2*3*count),uvs=new Float32Array(2*2*3*count);for(var i=0;i<count;i++)
{var angle1=2*Math.PI*i/count-Math.PI*(1/2-1/count),sin1=0.5*Math.sin(angle1),cos1=0.5*Math.cos(angle1);var angle2=2*Math.PI*(i+1)/count-Math.PI*(1/2-1/count),sin2=0.5*Math.sin(angle2),cos2=0.5*Math.cos(angle2);vertices[18*i]=cos1;vertices[18*i+1]=0;vertices[18*i+2]=sin1;vertices[18*i+3]=cos2;vertices[18*i+4]=0;vertices[18*i+5]=sin2;vertices[18*i+6]=cos1;vertices[18*i+7]=1;vertices[18*i+8]=sin1;vertices[18*i+9]=cos2;vertices[18*i+10]=1;vertices[18*i+11]=sin2;vertices[18*i+12]=cos1;vertices[18*i+13]=0;vertices[18*i+14]=sin1;vertices[18*i+15]=cos1;vertices[18*i+16]=1;vertices[18*i+17]=sin1;console.assert(uvs[2*i+1]==0);var u1,u2;if(count>8)
{u1=4*i/count;u2=4*(i+1)/count;}
else
{u1=i;u2=i+1;}
uvs[12*i]=u1;uvs[12*i+2]=u2;uvs[12*i+4]=u1;uvs[12*i+6]=u2;uvs[12*i+8]=0;uvs[12*i+10]=1;}
suica._.frameGeometry.prism[count].setAttribute('position',new THREE.BufferAttribute(vertices,3));suica._.frameGeometry.prism[count].setAttribute('uv',new THREE.BufferAttribute(uvs,2));suica._.frameGeometry.prism[count].applyMatrix4(suica.orientation.MATRIX);}
return suica._.frameGeometry.prism[count];}
get clone()
{var object=new Prism(this.suica,this.n,this.center,this.size,this.color,this.flatShading);object.spin=this.spin;object.wireframe=this.wireframe;object.image=this.image;Suica.cloneEvents(object,this);return object;}}
class Cylinder extends Prism
{constructor(suica,center,size,color)
{super(suica,Suica.CIRCLECOUNT,center,size,color,false);}}
﻿
class Pyramid extends Mesh
{static COLOR='lightsalmon';static SIZE=30;static COUNT=6;constructor(suica,count,center,size,color,flatShading=true)
{count=Suica.parseNumber(count,Pyramid.COUNT);suica.parser?.parseTags();if(flatShading)
suica.debugCall('pyramid',count,center,size,color);else
suica.debugCall('cone',center,size,color);suica._.solidGeometry.pyramid=[];suica._.frameGeometry.pyramid=[];super(suica,new THREE.Mesh(Pyramid.getSolidGeometry(suica,count),flatShading?Mesh.flatMaterial.clone():Mesh.solidMaterial.clone()),new THREE.LineSegments(Pyramid.getFrameGeometry(suica,count),Mesh.lineMaterial.clone()),);this.center=Suica.parseCenter(center);this.size=Suica.parseSize(size,Pyramid.SIZE);this.color=Suica.parseColor(color,Pyramid.COLOR);this.n=count;this.flatShading=flatShading;}
get count()
{this.suica.parser?.parseTags();return this.n;}
set count(count)
{this.suica.parser?.parseTags();if(count==this.n)return;this.solidMesh.geometry=Pyramid.getSolidGeometry(this.suica,count);this.frameMesh.geometry=Pyramid.getFrameGeometry(this.suica,count);this.threejs.geometry=this.isWireframe?this.frameMesh.geometry:this.solidMesh.geometry;}
static getSolidGeometry(suica,count)
{if(!suica._.solidGeometry.pyramid[count])
{suica._.solidGeometry.pyramid[count]=suica.flipNormal(new THREE.ConeGeometry(0.5,1,count,1,false).translate(0,0.5,0).applyMatrix4(suica.orientation.MATRIX));}
return suica._.solidGeometry.pyramid[count];}
static getFrameGeometry(suica,count)
{if(!suica._.frameGeometry.pyramid[count])
{suica._.frameGeometry.pyramid[count]=new THREE.BufferGeometry();let vertices=new Float32Array(3*2*2*count),uvs=new Float32Array(2*2*2*count);for(var i=0;i<count;i++)
{var angle1=2*Math.PI*i/count-Math.PI*(1/2-1/count),sin1=0.5*Math.sin(angle1),cos1=0.5*Math.cos(angle1);var angle2=2*Math.PI*(i+1)/count-Math.PI*(1/2-1/count),sin2=0.5*Math.sin(angle2),cos2=0.5*Math.cos(angle2);vertices[12*i]=cos1;vertices[12*i+1]=0;vertices[12*i+2]=sin1;vertices[12*i+3]=cos2;vertices[12*i+4]=0;vertices[12*i+5]=sin2;vertices[12*i+6]=cos1;vertices[12*i+7]=0;vertices[12*i+8]=sin1;vertices[12*i+9]=0;vertices[12*i+10]=1;vertices[12*i+11]=0;console.assert(uvs[2*i+1]==0);var u1,u2;if(count>8)
{u1=4*i/count;u2=4*(i+1)/count;}
else
{u1=i;u2=i+1;}
uvs[8*i]=u1;uvs[8*i+2]=u2;uvs[8*i+4]=0;uvs[8*i+6]=1;}
suica._.frameGeometry.pyramid[count].setAttribute('position',new THREE.BufferAttribute(vertices,3));suica._.frameGeometry.pyramid[count].setAttribute('uv',new THREE.BufferAttribute(uvs,2));suica._.frameGeometry.pyramid[count].applyMatrix4(suica.orientation.MATRIX);}
return suica._.frameGeometry.pyramid[count];}
get clone()
{var object=new Pyramid(this.suica,this.n,this.center,this.size,this.color,this.flatShading);object.spin=this.spin;object.wireframe=this.wireframe;object.image=this.image;Suica.cloneEvents(object,this);return object;}}
class Cone extends Pyramid
{constructor(suica,center,size,color)
{super(suica,Suica.CIRCLECOUNT,center,size,color,false);}}
﻿
class Group extends Mesh
{static SIZE=[1,1,1];constructor(suica,...groupElements)
{suica.debugCall('group');super(suica,new THREE.Group(),null);this.threejs.suicaObject=this;this.groupElements=[];this.meshSize=[1,1,1];this.meshSpin=[0,0,0];this.add(...groupElements);}
add(...groupElements)
{for(var oneElement of groupElements)
{this.groupElements.push(oneElement);this.threejs.add(oneElement.threejs);}}
set color(color)
{for(var oneElement of this.groupElements)
{oneElement.color=color;}}
get clone()
{var object=new Group(this.suica);for(var oneElement of this.groupElements)
{object.add(oneElement.clone);}
object.center=this.center;object.size=this.size;object.spin=this.spin;Suica.cloneEvents(object,this);return object;}}
﻿
class SuicaCurve extends THREE.Curve
{constructor(curve)
{super();if(curve instanceof SuicaCurve)
return this;else
this.spline=spline(curve);}
getPoint(u,optionalTarget=new THREE.Vector3())
{var point=this.spline(u);optionalTarget.set(point[0]||0,point[1]||0,point[2]||0);optionalTarget.radius=point[3];return optionalTarget;}}
class SuicaTubeGeometry extends THREE.BufferGeometry
{constructor(path,tubularSegments,radialSegments,radius)
{super();this.parameters={path:path,tubularSegments:tubularSegments,radialSegments:radialSegments,radius:radius,};var count=(tubularSegments+1)*(radialSegments+1);{var indices=[];for(var j=1;j<=tubularSegments;j++)
for(var i=1;i<=radialSegments;i++)
{var a=(radialSegments+1)*(j-1)+(i-1),b=(radialSegments+1)*(j)+(i-1),c=(radialSegments+1)*(j)+(i),d=(radialSegments+1)*(j-1)+(i);indices.push(a,b,d);indices.push(b,c,d);}
this.setIndex(indices);}
{var uvs=new THREE.Float32BufferAttribute(new Array(2*count),2);for(var i=0,idx=0;i<=tubularSegments;i++)
for(var j=0;j<=radialSegments;j++)
uvs.setXY(idx++,i/tubularSegments,j/radialSegments);this.setAttribute('uv',uvs);}
{this.setAttribute('position',new THREE.Float32BufferAttribute(new Array(3*count),3));this.setAttribute('normal',new THREE.Float32BufferAttribute(new Array(3*count),3));this.update(path);}}
update(path)
{var tubularSegments=this.parameters.tubularSegments,radialSegments=this.parameters.radialSegments,radius=this.parameters.radius;var frames=path.computeFrenetFrames(tubularSegments,false);this.tangents=frames.tangents;this.normals=frames.normals;this.binormals=frames.binormals;var vertex=new THREE.Vector3(),normal=new THREE.Vector3(),p=new THREE.Vector3();var pos=this.getAttribute('position'),nor=this.getAttribute('normal');for(var i=0,idx=0;i<=tubularSegments;i++)
{p=path.getPointAt(i/tubularSegments,p);var N=frames.normals[i];var B=frames.binormals[i];for(var j=0;j<=radialSegments;j++)
{var v=j/radialSegments*2*Math.PI;var sin=Math.sin(v),cos=-Math.cos(v);normal.x=cos*N.x+sin*B.x;normal.y=cos*N.y+sin*B.y;normal.z=cos*N.z+sin*B.z;normal.normalize();nor.setXYZ(idx,normal.x,normal.y,normal.z);var rad=p.radius||radius;vertex.x=p.x+rad*normal.x;vertex.y=p.y+rad*normal.y;vertex.z=p.z+rad*normal.z;pos.setXYZ(idx,vertex.x,vertex.y,vertex.z);idx++;}}
pos.needsUpdate=true;nor.needsUpdate=true;}
clone()
{return new SuicaTubeGeometry(this.parameters.path,this.parameters.tubularSegments,this.parameters.radialSegments,this.parameters.radius);}}
class Tube extends Mesh
{static POINTS=[]
static COUNT=[60,20];static COLOR='lightsalmon';static SIZE=1;static RADIUS=5;static CLOSE=false;constructor(suica,center,curve,radius,count,size,color)
{suica.parser?.parseTags();suica.debugCall('tube',center,curve?.name||curve,radius,count,size,color);radius=Suica.parseNumber(radius,Tube.RADIUS);var tubularSegments,radialSegments;count=Suica.parseSize(count,Tube.COUNT);if(Array.isArray(count))
{tubularSegments=Suica.parseSize(count[0],Tube.COUNT[0]);radialSegments=Suica.parseSize(count[1],Tube.COUNT[1]);}
else
{tubularSegments=count;radialSegments=Tube.COUNT[1];}
var geometry=new SuicaTubeGeometry(new SuicaCurve(curve),tubularSegments,radialSegments,radius);super(suica,new THREE.Mesh(geometry,Mesh.solidMaterial.clone()),null,);this._curve=curve;this.center=Suica.parseCenter(center);this.size=Suica.parseSize(size,Tube.SIZE);this.color=Suica.parseColor(color,Tube.COLOR);this._radius=radius;this._count=count;}
get count()
{return this._count;}
set count(count)
{var tubularSegments,radialSegments;count=Suica.parseSize(count);if(Array.isArray(count))
{tubularSegments=Suica.parseSize(count[0],Tube.COUNT[0]);radialSegments=Suica.parseSize(count[1],Tube.COUNT[1]);}
else
{tubularSegments=count;radialSegments=Tube.COUNT[1];}
this._count=count;this.threejs.geometry.dispose();this.threejs.geometry=new SuicaTubeGeometry(new SuicaCurve(this._curve),tubularSegments,radialSegments,this._radius);}
get radius()
{return this._radius;}
set radius(radius)
{radius=Suica.parseNumber(radius);this._radius=radius;this.threejs.geometry.parameters.radius=radius;this.threejs.geometry.update(new SuicaCurve(this._curve));}
get curve()
{return this._curve;}
set curve(curve)
{this._curve=curve;this.threejs.geometry.update(new SuicaCurve(curve));}
get clone()
{var object=new Tube(this.suica,this.center,this.curve,this.radius,this.size,this.color);object.spin=this.spin;object.image=this.image;Suica.cloneEvents(object,this);return object;}}
﻿
class Convex extends Mesh
{static POINTS=[[1,1,1],[1,1,-1],[1,-1,1],[1,-1,-1],[-1,1,1],[-1,1,-1],[-1,-1,1],[-1,-1,-1]];static SIZE=[1,1,1];static COLOR='lightsalmon';constructor(suica,points,size,color)
{suica.parser?.parseTags();suica.debugCall('convex',points,size,color);var geometry=Convex.generateGeometry(points);super(suica,new THREE.Mesh(geometry,Mesh.solidMaterial.clone()),null,);this.center=[0,0,0];this.size=Suica.parseSize(size,Convex.SIZE);this.color=Suica.parseColor(color,Convex.COLOR);this._points=points;}
static generateGeometry(points)
{var threejsPoints=[];for(var pnt of points)
{if(pnt.center)pnt=pnt.center;threejsPoints.push(new THREE.Vector3(...pnt));}
var geometry=new THREE.ConvexGeometry(threejsPoints);const MAX_X=1,MAX_Y=2,MAX_Z=3;var uvs=[];var pos=geometry.getAttribute('position'),nor=geometry.getAttribute('normal');for(var i=0;i<pos.count;i++)
{var nx=Math.abs(nor.getX(i)),ny=Math.abs(nor.getY(i)),nz=Math.abs(nor.getZ(i));var max=MAX_X;if(ny>=nx&&ny>=nz)max=MAX_Y
else
if(nz>=nx&&nz>=nx)max=MAX_Z;var x=pos.getX(i),y=pos.getY(i),z=pos.getZ(i);switch(max)
{case MAX_X:uvs.push(y,z);break;case MAX_Y:uvs.push(x,z);break;case MAX_Z:uvs.push(x,y);break;}}
geometry.setAttribute('uv',new THREE.BufferAttribute(new Float32Array(uvs),2));return geometry;}
get clone()
{var object=new Convex(this.suica,this._points,this.size,this.color);object.spin=this.spin;object.image=this.image;Suica.cloneEvents(object,this);return object;}
set src(points)
{this._points=points;this.threejs.geometry.dispose();this.threejs.geometry=Convex.generateGeometry(points);}
get vertices()
{var vertices=[],pos=this.threejs.geometry.getAttribute('position');for(var i=0;i<pos.count;i++)
vertices.push([pos.getX(i),pos.getY(i),pos.getZ(i)]);return vertices;}}
﻿
class Model extends Mesh
{static SIZE=1;constructor(suica,src,center,size)
{suica.parser?.parseTags();suica.debugCall('model',src,center,size);super(suica,new THREE.Mesh(),null,);this.ready=false;this.src=src;this.center=Suica.parseCenter(center);this.size=Suica.parseSize(size,Tube.SIZE);this.waitingList=[];}
get src()
{return this._src;}
set src(src)
{if(!src)return;var that=this;this._src=src;var fileExt=src.split('.').pop().toUpperCase();switch(fileExt)
{case'GLTF':case'GLB':new THREE.GLTFLoader().load(src,objectLoadedGLTF);break;default:throw`error: ${fileExt} models cannot be loaded`;}
function objectLoadedGLTF(object)
{object=object.scene;object.traverse(noMetal);function noMetal(child)
{if(child.isMesh)child.material.metalness=0;if(child.children.lenhth)child.traverse(noMetal);}
replaceObject(object);that.ready=true;for(var waiting of that.waitingList)
{waiting.threejs.add(object.clone());}
that.waitingList=[];}
function replaceObject(object)
{if(that.threejs.children.length)that.threejs.remove(that.threejs.children[0]);that.threejs.add(object);}}
get clone()
{var object=new Model(this.suica,'',this.center,this.size);if(this.ready)
{object.threejs.add(this.threejs.children[0].clone());}
else
{this.waitingList.push(object);}
object.spin=this.spin;object.image=this.image;Suica.cloneEvents(object,this);return object;}
static save(fileName,suicaObjects)
{if(!suicaObjects)suicaObjects=allObjects();var objects=[];for(var obj of suicaObjects)
objects.push(obj.threejs);var exporter=new THREE.GLTFExporter()
if(!fileName)
{exporter.parse(objects,(gltf)=>prompt('GLTF text',JSON.stringify(gltf)),(error)=>{throw error;},{binary:false});}
else
{var fileExt=fileName.split('.').pop().toUpperCase(),binary=fileExt=='GLB';if(fileExt!='GLB'&&fileExt!='GLTF')fileName+='.gltf';exporter.parse(objects,(gltf)=>{var type=binary?'application/octet-stream':'text/plain;charset=utf-8',data=binary?gltf:JSON.stringify(gltf),blob=new Blob([data],{type:type});var link=document.createElement('a');link.href=URL.createObjectURL(blob);link.download=fileName;link.click();},(error)=>{throw error},{binary:binary});}}}
﻿
class Construct extends Mesh
{static SIZE=[1,1,1];static COLOR='lightsalmon';constructor(suica,expression,size,color)
{suica.parser?.parseTags();suica.debugCall('construct',expression,size,color);expression='('+expression+')';var tokens='';for(var i=0;i<expression.length;i++)
{var ch=expression[i];if('*+-()'.indexOf(ch)>-1)ch=' '+ch+' ';tokens+=ch;}
tokens=tokens.split(' ').filter(token=>token);var polish=[],stack=[],p,q,token;for(token of tokens)
{switch(token)
{case')':while(p=stack.pop(),p!='(')
polish.push(p);break;case'+':case'-':while(p=stack.pop(),p=='*'||p=='+'||p=='-')
polish.push(p);if(p)stack.push(p);case'(':case'*':stack.push(token);break;default:polish.push(token);}}
console.assert(stack.length==0);var csg;stack=[];for(token of polish)
switch(token)
{case'*':csg=new CSG();q=stack.pop();p=stack.pop();stack.push(csg.intersect([p,q]).toMesh());break;case'+':csg=new CSG();q=stack.pop();p=stack.pop();stack.push(csg.union([p,q]).toMesh());break;case'-':csg=new CSG();q=stack.pop();p=stack.pop();stack.push(csg.subtract([p,q]).toMesh());break;default:stack.push(Suica.evaluate(token).threejs);}
p=stack.pop();p.material=p.material.clone();super(suica,p,null,);this.center=[0,0,0];this.size=Suica.parseSize(size,Construct.SIZE);this.color=Suica.parseColor(color,Construct.COLOR);}}
﻿
class Scorm
{constructor()
{this.api=this.findAPI(window)||this.findAPI(window.opener);}
findAPI(win)
{if(win==null)
return null;var attempts=0;while((win.API==null)&&(win.parent!=null)&&(win.parent!=win))
{attempts++;if(attempts>10)
{console.warn('Cannot find SCORM API.');return null;}
win=win.parent;}
return win.API;}
getValue(name)
{var value='';if(this.api&&this.api.LMSInitialize(""))
{value=this.api.LMSGetValue(name);this.api.LMSFinish("");}
return value;}
setValue(name,value)
{if(this.api&&this.api.LMSInitialize(""))
{value=this.api.LMSSetValue(name,value);this.api.LMSCommit("");this.api.LMSFinish("");}
return value;}
get studentId()
{return this.getValue('cmi.core.student_id');}
get studentName()
{return this.getValue('cmi.core.student_name');}
get score()
{return this.getValue('cmi.core.score.raw');}
set score(value)
{this.setValue('cmi.core.score.raw',value);}}
window.scorm=new Scorm();}