
class BSPNode{constructor(polygons){this.plane=null;this.front=null;this.back=null;this.polygons=[];if(polygons)this.build(polygons);}
clone(){const node=new BSPNode();node.plane=this.plane&&this.plane.clone();node.front=this.front&&this.front.clone();node.back=this.back&&this.back.clone();node.polygons=this.polygons.map(function(p){return p.clone();});return node;}
invert(){for(let i=0;i<this.polygons.length;i++){this.polygons[i].negate();}
this.plane.negate();if(this.front)this.front.invert();if(this.back)this.back.invert();const temp=this.front;this.front=this.back;this.back=temp;}
clipPolygons(polygons){if(!this.plane)return polygons.slice();let front=[];let back=[];for(let i=0;i<polygons.length;i++){this.plane.splitPolygon(polygons[i],front,back,front,back);}
if(this.front)front=this.front.clipPolygons(front);if(this.back)back=this.back.clipPolygons(back);else back=[];return front.concat(back);}
clipTo(bsp){this.polygons=bsp.clipPolygons(this.polygons);if(this.front)this.front.clipTo(bsp);if(this.back)this.back.clipTo(bsp);}
allPolygons(){let polygons=this.polygons.slice();if(this.front)
polygons=polygons.concat(this.front.allPolygons());if(this.back)
polygons=polygons.concat(this.back.allPolygons());return polygons;}
build(polygons){if(!polygons.length)return;if(!this.plane)this.plane=polygons[0].plane;const front=[];const back=[];for(let i=0;i<polygons.length;i++){this.plane.splitPolygon(polygons[i],this.polygons,this.polygons,front,back,);}
if(front.length){if(!this.front)this.front=new BSPNode();this.front.build(front);}
if(back.length){if(!this.back)this.back=new BSPNode();this.back.build(back);}}}